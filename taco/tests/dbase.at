dnl Process this file with autom4te to create testsuite. -*- Autotest -*-
dnl
dnl Test suite for TACO.
dnl Copyright (C) 2003-2013 Jens Kr√ºger <jens.krueger@frm2.tum.de>
dnl
dnl This program is free software; you can redistribute it and/or modify
dnl it under the terms of the GNU General Public License as published by
dnl the Free Software Foundation; either version 2, or (at your option)
dnl any later version.
dnl
dnl This program is distributed in the hope that it will be useful,
dnl but WITHOUT ANY WARRANTY; without even the implied warranty of
dnl MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
dnl GNU General Public License for more details.
dnl
dnl You should have received a copy of the GNU General Public License
dnl along with this program; if not, write to the Free Software
dnl Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
dnl 02111-1307, USA.

AT_SETUP([connection to the database])
AT_CHECK(AT_TACO_RUN_LOCAL([db_connect]))
AT_CLEANUP

AT_SETUP([db_info command])
if test x"$python" = x"yes" ; then
	if test x"$extensions" = x"yes" ; then
		AT_CHECK([taco db_info | tail -15], [], [[		DEVICE STATISTICS

4 devices are defined in database
0 of the defined devices are actually exported:
    0 for the TEST domain
0 pseudo devices are defined in the database

		RESOURCE STATISTICS

792 resources are defined in database:
    2 resources for the CLASS domain
    519 resources for the CMDS domain
    266 resources for the ERROR domain
    3 resources for the SEC domain
    2 resources for the TEST domain
]])
	else
		AT_CHECK([taco db_info | tail -15], [], [[		DEVICE STATISTICS

4 devices are defined in database
0 of the defined devices are actually exported:
    0 for the TEST domain
0 pseudo devices are defined in the database

		RESOURCE STATISTICS

762 resources are defined in database:
    2 resources for the CLASS domain
    512 resources for the CMDS domain
    243 resources for the ERROR domain
    3 resources for the SEC domain
    2 resources for the TEST domain
]])
	fi
else
	if test x"$extensions" = x"yes" ; then
		AT_CHECK([taco db_info | tail -15], [], [[		DEVICE STATISTICS

2 devices are defined in database
0 of the defined devices are actually exported:
    0 for the TEST domain
0 pseudo devices are defined in the database

		RESOURCE STATISTICS

790 resources are defined in database:
    2 resources for the CLASS domain
    518 resources for the CMDS domain
    266 resources for the ERROR domain
    3 resources for the SEC domain
    1 resources for the TEST domain
]])
	else
		AT_CHECK([taco db_info | tail -15], [], [[		DEVICE STATISTICS

2 devices are defined in database
0 of the defined devices are actually exported:
    0 for the TEST domain
0 pseudo devices are defined in the database

		RESOURCE STATISTICS

761 resources are defined in database:
    2 resources for the CLASS domain
    512 resources for the CMDS domain
    243 resources for the ERROR domain
    3 resources for the SEC domain
    1 resources for the TEST domain
]])
	fi
fi
AT_CLEANUP

AT_SETUP([db_getresresoval command])
AT_CHECK(AT_TACO_RUN_LOCAL([db_getresoval CMDS/0/0/1]), [], [[cmds/0/0/1: DevOn
]])
AT_CLEANUP

AT_SETUP([db_update command])
AT_CHECK([taco db_update TEST/Inst_verify.res])
AT_CLEANUP

AT_SETUP([db_devres command])
AT_CHECK([taco db_devres test/device/1], [], 
[[test/device/1/status: Off
]])
AT_CLEANUP

AT_SETUP([db_servinfo command])
AT_CHECK([taco db_servinfo inst_verify/1], [], [[The device test/device/1 is defined for this server but is not exported
]])
AT_CLEANUP

AT_SETUP([db_analyze_data function])
AT_DATA([test.res], [[
# This file contains only resources for the tests
test/test/device:	test/device/2 \
			test/device/3 \
			test/device/4 
test/device/2/res1:	"resource 1"
test/device/2/res2:	2
test/device/2/res3:	3.1
test/device/2/res4:	1,1,1
test/device/2/res5:	"A","B","C"
test/device/2/res6:	1,2,3,\
			4
test/device/2/res7:	1,2,3\
			,4
]])
AT_CHECK([RES_BASE_DIR=`pwd` AT_TACO_RUN_LOCAL db_analyze test.res], [],
[[File analysis is OK
1 device list defined
test/test/device:test/device/2,test/device/3,test/device/4
7 resources defined
test/device/2/res1:resource 1
test/device/2/res2:2
test/device/2/res3:3.1
test/device/2/res4:1^B1^B1
test/device/2/res5:A^BB^BC
test/device/2/res6:1^B2^B3^B4
test/device/2/res7:1^B2^B3^B4
]])
AT_CLEANUP

AT_SETUP([db_update command])
AT_DATA([test.res], [[
# This file contains only resources for the tests
test/test/device:	test/device/2 \
			test/device/3 \
			test/device/4 
test/device/2/res1:	"resource 1"
test/device/2/res2:	2
test/device/2/res3:	3.1
test/device/2/res4:	1,1,1
test/device/2/res5:	"A","B","C"
]])
AT_CHECK([RES_BASE_DIR=`pwd` taco db_update test.res
taco db_devres test/device/2], [],
[[test/device/2/res1: resource 1
test/device/2/res2: 2
test/device/2/res3: 3.1
test/device/2/res4: 1,1,1
test/device/2/res5: A,B,C
]])
AT_CLEANUP

AT_SETUP([db_update command failes])
AT_DATA([test.res], [[
# This file contains only resources for the tests
test/test/devices:	test/device/2 
test/device/2/res1:	"resource 1"
]])
AT_CHECK([RES_BASE_DIR=`pwd` taco db_update test.res 2>/dev/null], [255])  
AT_CLEANUP

AT_SETUP([db_getresource function])
AT_CHECK(AT_TACO_RUN_LOCAL([db_resget test/device/2/res1]), [], [[resource 1
]])
AT_CLEANUP

AT_SETUP([db_putresource function])
AT_CHECK([AT_TACO_RUN_LOCAL([db_resput test/device/3/res1 TEST])
AT_TACO_RUN_LOCAL([db_resget test/device/3/res1])
AT_TACO_RUN_LOCAL([db_resput test/device/3/res1 TEST TEST2 TEST3])
AT_TACO_RUN_LOCAL([db_resget test/device/3/res1])], [], [[TEST
TEST,TEST2,TEST3
]])
AT_CLEANUP

AT_SETUP([db_delresource function])
AT_CHECK([taco db_resdel test/device/3/res1], [])
AT_CLEANUP

AT_SETUP([check existing resource domains])
AT_CHECK(AT_TACO_RUN_LOCAL([db_resdomain]), [], [[class
cmds
error
events
longtest
sec
sys
test
]])
AT_CLEANUP

AT_SETUP([check existing resource families])
if test x"$python" = x"yes" ; then 
	AT_CHECK(AT_TACO_RUN_LOCAL([db_resfamily test]), [], [[device
python
]])
else
	AT_CHECK(AT_TACO_RUN_LOCAL([db_resfamily test]), [], [[device
]])
fi
AT_CLEANUP

AT_SETUP([check existing resource members])
AT_CHECK(AT_TACO_RUN_LOCAL([db_resmember test device]), [], [[1
2
]])
AT_CLEANUP

AT_SETUP([check resource value])
AT_CHECK(AT_TACO_RUN_LOCAL([db_getresoval class/inst_verify/default/config]), [], [[class/inst_verify/default/config: 10
]])
AT_CLEANUP 

AT_SETUP([check existing device domains])
AT_CHECK(AT_TACO_RUN_LOCAL([db_devdomain]), [], [[test
]])
AT_CLEANUP

AT_SETUP([check existing device families])
if test x"$python" = x"yes" ; then
	AT_CHECK(AT_TACO_RUN_LOCAL([db_devfamily test]), [], [[agps
device
python
]])
else
	AT_CHECK(AT_TACO_RUN_LOCAL([db_devfamily test]), [], [[agps
device
]])
fi
AT_CLEANUP

AT_SETUP([check existing device members])
AT_CHECK(AT_TACO_RUN_LOCAL([db_devmember test device]), [], [[1
2
]])
AT_CLEANUP


AT_SETUP([check db_export and db_servunreg])
AT_DATA([test_server.res], [[
# This file contains only resources for the tests
test_server/1/device:	test/a/1 \
			test/longfamily/long

test/a/1/type: TestDevice
test/longfamily/long/type: TestDevice2
test/longfamily/long/longresource: 25
]])
AT_CHECK([
RES_BASE_DIR=`pwd` taco db_update test_server.res
AT_TACO_RUN_LOCAL([db_devperslist test_server])
AT_TACO_RUN_LOCAL([test_server 1 -d])
sleep 5
AT_TACO_RUN_TEST([off test_server >>log])
sleep 1
AT_TACO_RUN_LOCAL([test_server 1 -d])
sleep 5
AT_TACO_RUN_TEST([off test_server >>log])
], [], [[1
]])
AT_CLEANUP

AT_SETUP([db_update command with maximum name sizes])
AT_DATA([test.res], [[
# This file contains only resources for the tests
test/test/device:	longtest/longest_family_name/longest_member_name 

longtest/longest_family_name/longest_member_name/longresourcename1:	"resource 1"
longtest/longest_family_name/longest_member_name/longresourcename2:	2
longtest/longest_family_name/longest_member_name/longresourcename3:	3.1
longtest/longest_family_name/longest_member_name/longest_possible_resource_name1: a	
]])
AT_CHECK([RES_BASE_DIR=`pwd` taco db_update test.res])
AT_CLEANUP

AT_SETUP([check value from resources with extra long names])
AT_CHECK(AT_TACO_RUN_LOCAL([db_getresoval longtest/longest_family_name/longest_member_name/longest_possible_resource_name1]), [], 
	[[longtest/longest_family_name/longest_member_name/longest_possible_resource_name1: a
]])
AT_CLEANUP 

AT_SETUP([db_servinfo with extremly long server names])
AT_DATA([test.res], [[
# This file contains only resources for the tests
longest_testserver/srv0/device:         test/device/10,test/device/20
]])
AT_CHECK([RES_BASE_DIR=`pwd` taco db_update test.res
AT_TACO_RUN_TEST([db_servinfo longest_testserver/srv0])
], [], [[The device test/device/10 is defined for this server but is not exported
The device test/device/20 is defined for this server but is not exported
]])
AT_CLEANUP

