/*
 * Generated by the ICS builderXcessory (BX).
 *
 *
 * Builder Xcessory 4.0.
 *
 * Identification: 
 */
module main_uil
version = 'V1.0'
names = case_sensitive
!(BX) bx_info("java_flags", "-verbose")
!(BX) bx_info("java_unmanage_dialogs", "true")
!(BX) bx_info("java_html_all_class", "true")
!(BX) bx_info("java_applet_runnable", "false")
!(BX) bx_info("java_main_applet", "true")
!(BX) bx_info("java_constants", "Defs", true)
!(BX) bx_info("java_html", "MainApp", true)
!(BX) bx_info("java_main", "MainApp", true)
!(BX) bx_info("java_makefile", "makefile-java", true)
!(BX) bx_info("vk_libs", "-lvk -lvkhelp -lXpm -L/usr/lib/Motif1.2 -lXm -lXt -lX11")
!(BX) bx_info("vk_cflags", "-DFUNCPROTO -DXTFUNCPROTO -I/usr/include/Motif1.2 -I/usr/include/X11R5")
!(BX) bx_info("vk_cc", "CC")
!(BX) bx_info("vk_target", "main-vk")
!(BX) bx_info("vk_use_tooltalk", "false")
!(BX) bx_info("vk_use_runonce", "false")
!(BX) bx_info("vk_ignore_shell_geometry", "false")
!(BX) bx_info("vk_subclass_vk_components", "true")
!(BX) bx_info("vk_del_nested_classes", "false")
!(BX) bx_info("vk_rm_exp_callbacks", "false")
!(BX) bx_info("vk_unmanage_dialogs", "true")
!(BX) bx_info("vk_name", "BuilderProduct")
!(BX) bx_info("vk_class", "BuilderProduct")
!(BX) bx_info("vk_hdrext", "h")
!(BX) bx_info("vk_srcext", "C")
!(BX) bx_info("vk_app_defaults", "app-defaults", true)
!(BX) bx_info("vk_callbacks", "callbacks-vk", true)
!(BX) bx_info("vk_utilities", "bxutils-vk", true)
!(BX) bx_info("vk_constants", "defs-vk", true)
!(BX) bx_info("vk_main", "main-vk", true)
!(BX) bx_info("vk_makefile", "makefile-vk", true)
!(BX) bx_info("vk_imakefile", "Imakefile", true)
!(BX) bx_info("c++_libs", "-L/usr/lib/Motif1.2 -lXm -lXt -lX11")
!(BX) bx_info("c++_cflags", "-DFUNCPROTO -DXTFUNCPROTO -I/usr/include/Motif1.2 -I/usr/include/X11R5")
!(BX) bx_info("c++_cc", "CC")
!(BX) bx_info("c++_target", "main-C")
!(BX) bx_info("c++_del_nested_classes", "false")
!(BX) bx_info("c++_ignore_shell_geometry", "false")
!(BX) bx_info("c++_visible_windows_only", "false")
!(BX) bx_info("c++_rm_exp_callbacks", "false")
!(BX) bx_info("c++_old_construct", "false")
!(BX) bx_info("c++_unmanage_dialogs", "true")
!(BX) bx_info("c++_gen_derived", "false")
!(BX) bx_info("c++_name", "BuilderProduct")
!(BX) bx_info("c++_class", "BuilderProduct")
!(BX) bx_info("c++_hdrext", "h")
!(BX) bx_info("c++_srcext", "C")
!(BX) bx_info("c++_app_defaults", "app-defaults", true)
!(BX) bx_info("c++_callbacks", "callbacks-C", true)
!(BX) bx_info("c++_utilities", "bxutils-C", true)
!(BX) bx_info("c++_constants", "defs-C", true)
!(BX) bx_info("c++_main", "main-C", true)
!(BX) bx_info("c++_baseclass", "UIComponent", true)
!(BX) bx_info("c++_makefile", "makefile-C", true)
!(BX) bx_info("c++_imakefile", "Imakefile", true)
!(BX) bx_info("c_libs", "-L/usr/lib/Motif1.2 -lXm -lXt -lX11")
!(BX) bx_info("c_cflags", "-I/usr/include/Motif1.2 -I/usr/include/X11R5")
!(BX) bx_info("c_cc", "cc")
!(BX) bx_info("c_target", "main-c")
!(BX) bx_info("c_ignore_shell_geometry", "false")
!(BX) bx_info("c_visible_windows_only", "false")
!(BX) bx_info("c_rm_exp_callbacks", "false")
!(BX) bx_info("c_reverse_dialogs", "true")
!(BX) bx_info("c_dialogs_in_routine", "true")
!(BX) bx_info("c_unmanage_dialogs", "true")
!(BX) bx_info("c_name", "xdevmenu")
!(BX) bx_info("c_class", "XDevmenu")
!(BX) bx_info("c_app_defaults", "XDevmenu", true)
!(BX) bx_info("c_utilities", "xdev_bxutil.c", true)
!(BX) bx_info("c_constants", "xdev_const.h", true)
!(BX) bx_info("c_callbacks", "xdev_cb.c", true)
!(BX) bx_info("c_creation", "xdev_creation.c", true)
!(BX) bx_info("c_main", "xdev_main.c", true)
!(BX) bx_info("c_makefile", "makefile-c", false)
!(BX) bx_info("c_imakefile", "Imakefile", false)
!(BX) bx_info("uil_libs", "-L/usr/lib/Motif1.2 -lMrm -lXm -lXt -lX11")
!(BX) bx_info("uil_uilflags", "-w -I/usr/include/Motif1.2/uil")
!(BX) bx_info("uil_cflags", "-I/usr/include/Motif1.2 -I/usr/include/X11R5")
!(BX) bx_info("uil_cc", "cc")
!(BX) bx_info("uil_target", "main-uil")
!(BX) bx_info("uil_ignore_shell_geometry", "false")
!(BX) bx_info("uil_visible_windows_only", "false")
!(BX) bx_info("uil_name", "BuilderProduct")
!(BX) bx_info("uil_class", "BuilderProduct")
!(BX) bx_info("uil_app_defaults", "app_defaults", true)
!(BX) bx_info("uil_utilities", "bxutils-uil.c", true)
!(BX) bx_info("uil_constants", "main-uil.h", true)
!(BX) bx_info("uil_callbacks", "callbacks-uil.c", true)
!(BX) bx_info("uil_uil", "xdevmenu.uil", true)
!(BX) bx_info("uil_main", "main-uil.c", true)
!(BX) bx_info("uil_makefile", "makefile-uil", true)
!(BX) bx_info("uil_imakefile", "Imakefile", true)
!(BX) bx_info("include_path", ".", false)
!(BX) bx_info("xrunner_command", "$(M_ROOT)/arch/X11.5/Xm1.2/mic_xm.o", false)
!(BX) bx_info("system_directory", "/usr/local/bx_4.0/builderXcessory")
!(BX) bx_info("builder_version", "Builder Xcessory 4.0")
!(BX) bx_info("build_lang", "C")
!(BX) bx_info("ansi", "true")
!(BX) bx_info("use_locales", "false")
!(BX) bx_info("new_mrm_style", "true")
!(BX) bx_info("c_wrap_lines", "false")
!(BX) bx_info("uil_wrap_lines", "true")
!(BX) bx_info("integrate_purify", "false")
!(BX) bx_info("purify_command", "purify")
!(BX) bx_info("integrate_xrunner", "false")

value
    GUI_MAIN_ROW_COL :  0;
    GUI_MAIN_RESULT_TEXT :  1;
    GUI_IMPORT_FORM :  2;
    GUI_DOMAIN_TEXT :  3;
    GUI_FAMILY_TEXT :  4;
    GUI_MEMBER_TEXT :  5;
    GUI_IMPORT_SELBOX :  6;
    GUI_DEVINFO_BB :  7;
    GUI_DEVINFO_NAME_TEXT :  8;
    GUI_DEVINFO_CLASS_TEXT :  9;
    GUI_DEVINFO_TYPE_TEXT :  10;
    GUI_DEVINFO_SERVNAME_TEXT :  11;
    GUI_DEVINFO_HOST_TEXT :  12;
    GUI_HELP_VERS_BB :  13;
    GUI_HELP_VERS_TEXT :  14;
    GUI_COMMAND_SELBOX :  15;
    GUI_TIMEOUT_SELBOX :  16;
    GUI_ERROR_WINDOW :  17;
    GUI_INARG_WIN :  18;
    GUI_INARG_FORMAT_TEXT :  19;
    GUI_INARG_NAME_TEXT :  20;
    GUI_INARG_VAL_TEXT :  21;
    XDEV_OK :  0;
    XDEV_NOTOK :  -1;
    XDEV_MAX_DEV :  30;
    GUI_MAX_NB_OUT_LINES :  550;
    GUI_NB_SCROLL_OUT_LINES :  50;
    GUI_PROTOCOL_RB :  22;
    GUI_TCP_TB :  23;
    GUI_UDP_TB :  24;
procedure BxManageCB(string);
procedure BxUnmanageCB(string);
procedure BxExitCB(integer);
procedure ccb_save_widget_id(integer);
procedure cb_fill_dev_selbox();
procedure ccb_dev_import_selbox();
procedure cb_device_import();
procedure ccb_file_cb();
procedure ccb_cmd_sel_box();
procedure cb_execute_cmd();
procedure cb_execute_cmd_input();
procedure cb_dev_info();
procedure ccb_help_version_text();
procedure cb_specified_cmd(string);
procedure cb_close_device();
procedure cb_change_timeout();
procedure ccb_error_messbox();
procedure ccb_timeout_prompt();
procedure ccb_confirm_messbox();
procedure cb_prompt_timeout();
procedure cb_protocol_change();
procedure cb_protocol_entry();
procedure cb_unset_rpc_protocol();
!(BX) "Widget" "GUI_INARG_FORM_WINDOW"
identifier GUI_INARG_FORM_WINDOW;

list BaseStyle : arguments {
};

list BaseStyleReasons : callbacks {
};

!(BX)list BaseStyleHandlers : handlers {
!(BX)};

list MainStyle : arguments {
        arguments BaseStyle;
!(BX)   _XmNbackground = color('Gray60');
!(BX)   _XmNfontList = font_table(
!(BX)		font('-*-helvetica-bold-r-*-*-*-180-75-75-*-*-iso8859-1'));
!(BX)   _XmNforeground = color('Black');
};

list MainStyleReasons : callbacks {
        callbacks BaseStyleReasons;
};

!(BX)list MainStyleHandlers : handlers {
!(BX)    handlers BaseStyleHandlers;
!(BX)};

list MenuStyle : arguments {
        arguments BaseStyle;
!(BX)   _XmNbackground = color('SeaGreen');
!(BX)   _XmNfontList = font_table(
!(BX)		font('-*-helvetica-bold-r-*-*-*-140-75-75-*-*-iso8859-1'));
!(BX)   _XmNforeground = color('White');
};

list MenuStyleReasons : callbacks {
        callbacks BaseStyleReasons;
};

!(BX)list MenuStyleHandlers : handlers {
!(BX)    handlers BaseStyleHandlers;
!(BX)};

list WorkStyle : arguments {
        arguments BaseStyle;
!(BX)   _XmNbackground = color('Gray60');
!(BX)   _XmNfontList = font_table(
!(BX)		font('-*-helvetica-bold-r-*-*-*-180-75-75-*-*-iso8859-1'));
!(BX)   _XmNforeground = color('Black');
};

list WorkStyleReasons : callbacks {
        callbacks BaseStyleReasons;
};

!(BX)list WorkStyleHandlers : handlers {
!(BX)    handlers BaseStyleHandlers;
!(BX)};

list CommandStyle : arguments {
        arguments BaseStyle;
!(BX)   _XmNbackground = color('Gray60');
!(BX)   _XmNfontList = font_table(
!(BX)		font('-*-times-bold-r-*-*-*-180-75-75-*-*-iso8859-1'));
!(BX)   _XmNforeground = color('Black');
};

list CommandStyleReasons : callbacks {
        callbacks BaseStyleReasons;
};

!(BX)list CommandStyleHandlers : handlers {
!(BX)    handlers BaseStyleHandlers;
!(BX)};

list MessageStyle : arguments {
        arguments BaseStyle;
!(BX)   _XmNbackground = color('Gray60');
!(BX)   _XmNfontList = font_table(
!(BX)		font('-*-times-bold-r-*-*-*-180-75-75-*-*-iso8859-1'));
!(BX)   _XmNforeground = color('Black');
};

list MessageStyleReasons : callbacks {
        callbacks BaseStyleReasons;
};

!(BX)list MessageStyleHandlers : handlers {
!(BX)    handlers BaseStyleHandlers;
!(BX)};

list ErrorStyle : arguments {
        arguments BaseStyle;
!(BX)   _XmNbackground = color('Gray60');
!(BX)   _XmNfontList = font_table(
!(BX)		font('-*-helvetica-bold-r-*-*-*-180-75-75-*-*-iso8859-1'));
!(BX)   _XmNforeground = color('Black');
};

list ErrorStyleReasons : callbacks {
        callbacks BaseStyleReasons;
};

!(BX)list ErrorStyleHandlers : handlers {
!(BX)    handlers BaseStyleHandlers;
!(BX)};

list WarningStyle : arguments {
        arguments BaseStyle;
!(BX)   _XmNbackground = color('Gray60');
!(BX)   _XmNfontList = font_table(
!(BX)		font('-*-helvetica-bold-r-*-*-*-180-75-75-*-*-iso8859-1'));
!(BX)   _XmNforeground = color('Black');
};

list WarningStyleReasons : callbacks {
        callbacks BaseStyleReasons;
};

!(BX)list WarningStyleHandlers : handlers {
!(BX)    handlers BaseStyleHandlers;
!(BX)};

list PromptStyle : arguments {
        arguments BaseStyle;
!(BX)   _XmNbackground = color('Gray60');
!(BX)   _XmNfontList = font_table(
!(BX)		font('-*-helvetica-bold-r-*-*-*-180-75-75-*-*-iso8859-1'));
!(BX)   _XmNforeground = color('Black');
};

list PromptStyleReasons : callbacks {
        callbacks BaseStyleReasons;
};

!(BX)list PromptStyleHandlers : handlers {
!(BX)    handlers BaseStyleHandlers;
!(BX)};

list WorkStyle2 : arguments {
        arguments BaseStyle;
!(BX)   _XmNbackground = color('Gray60');
!(BX)   _XmNbuttonFontList = font_table(
!(BX)		font('-*-helvetica-bold-r-*-*-*-140-75-75-*-*-iso8859-1'));
!(BX)   _XmNdefaultFontList = font_table(
!(BX)		font('-*-helvetica-bold-r-*-*-*-140-75-75-*-*-iso8859-1'));
!(BX)   _XmNfontList = font_table(
!(BX)		font('-*-helvetica-bold-r-*-*-*-140-75-75-*-*-iso8859-1'));
!(BX)   _XmNforeground = color('Black');
!(BX)   _XmNlabelFontList = font_table(
!(BX)		font('-*-helvetica-bold-r-*-*-*-140-75-75-*-*-iso8859-1'));
!(BX)   _XmNpopupFontList = font_table(
!(BX)		font('-*-helvetica-bold-r-*-*-*-140-75-75-*-*-iso8859-1'));
!(BX)   _XmNpopupForeground = color('Black');
!(BX)   _XmNtextFontList = font_table(
!(BX)		font('-*-helvetica-bold-r-*-*-*-140-75-75-*-*-iso8859-1'));
};

list WorkStyle2Reasons : callbacks {
        callbacks BaseStyleReasons;
};

!(BX)list WorkStyle2Handlers : handlers {
!(BX)    handlers BaseStyleHandlers;
!(BX)};


!(BX)object topLevelShell : TopLevelShell widget {
!(BX)    arguments {
!(BX)        arguments WorkStyle2;
!(BX)        _XmNtitle = "xdevmenu";
!(BX)        XmNx = 606;
!(BX)        XmNy = -21;
!(BX)        XmNwidth = 574;
!(BX)        XmNheight = 599;
!(BX)    };
!(BX)    controls {
!(BX)         managed XmMainWindow mainWindow;
!(BX)    };
!(BX)    callbacks {
!(BX)        callbacks WorkStyle2Reasons;
!(BX)    };
!(BX)    handlers {
!(BX)        handlers WorkStyle2Handlers;
!(BX)    };
!(BX)};

object mainWindow : XmMainWindow widget {
    arguments {
        arguments MainStyle;
        XmNmenuBar = XmMenuBar menuBar;
        XmNx = 617;
        XmNy = 12;
        XmNwidth = 574;
        XmNheight = 599;
    };
    controls {
!(BX)         unmanaged XmDialogShell protocolDS;
!(BX)         unmanaged XmDialogShell confirmExitDS;
!(BX)         unmanaged XmDialogShell in_argDS;
!(BX)         unmanaged XmDialogShell help_dataDS;
!(BX)         unmanaged XmDialogShell ch_timeoutDS;
!(BX)         unmanaged XmDialogShell help_appliDS;
!(BX)         unmanaged XmDialogShell errorDS;
!(BX)         unmanaged XmDialogShell help_versionDS;
!(BX)         unmanaged XmDialogShell dev_infoDS;
!(BX)         unmanaged XmDialogShell commandDS;
!(BX)         unmanaged XmDialogShell confirmCloseDS;
!(BX)         unmanaged XmDialogShell dev_importDS;
         managed XmMenuBar menuBar;
         managed XmPanedWindow mainPW;
    };
    callbacks {
        callbacks MainStyleReasons;
    };
!(BX)    handlers {
!(BX)        handlers MainStyleHandlers;
!(BX)    };
};

!(BX)object protocolDS : XmDialogShell widget {
!(BX)    arguments {
!(BX)        arguments WorkStyle2;
!(BX)        XmNwidth = 290;
!(BX)        XmNheight = 204;
!(BX)    };
!(BX)    controls {
!(BX)         managed XmBulletinBoardDialog protocolBB;
!(BX)    };
!(BX)    callbacks {
!(BX)        callbacks WorkStyle2Reasons;
!(BX)    };
!(BX)    handlers {
!(BX)        handlers WorkStyle2Handlers;
!(BX)    };
!(BX)};

object protocolBB : XmBulletinBoardDialog widget {
    arguments {
        arguments WorkStyle2;
        XmNresizePolicy = XmRESIZE_GROW;
!(BX)   _XmNdialogTitle = compound_string("Change  RPC  Protocol");
        XmNx = 818;
        XmNy = 702;
        XmNwidth = 290;
        XmNheight = 204;
    };
    controls {
         managed XmPushButton cancelPB1;
         managed XmPushButton setPB;
         managed XmSeparator protocolSEP;
         managed XmRadioBox protocolRBox;
    };
    callbacks {
        callbacks WorkStyle2Reasons;
    };
!(BX)    handlers {
!(BX)        handlers WorkStyle2Handlers;
!(BX)    };
};

object protocolRBox : XmRadioBox widget {
    arguments {
        arguments WorkStyle2;
        XmNradioAlwaysOne = false;
        XmNx = 75;
        XmNy = 18;
        XmNwidth = 66;
        XmNheight = 65;
    };
    controls {
         managed XmToggleButton tcpTB;
         managed XmToggleButton udpTB;
    };
    callbacks {
        callbacks WorkStyle2Reasons;
        MrmNcreateCallback = procedure ccb_save_widget_id(GUI_PROTOCOL_RB);
        XmNentryCallback = procedure cb_protocol_entry();
    };
!(BX)    handlers {
!(BX)        handlers WorkStyle2Handlers;
!(BX)    };
};

object tcpTB : XmToggleButton widget {
    arguments {
        arguments WorkStyle2;
!(BX)   _XmNlabelString = compound_string("TCP");
        XmNwidth = 60;
        XmNheight = 28;
    };
    controls {
    };
    callbacks {
        callbacks WorkStyle2Reasons;
        MrmNcreateCallback = procedure ccb_save_widget_id(GUI_TCP_TB);
    };
!(BX)    handlers {
!(BX)        handlers WorkStyle2Handlers;
!(BX)    };
};

object udpTB : XmToggleButton widget {
    arguments {
        arguments WorkStyle2;
!(BX)   _XmNlabelString = compound_string("UDP");
        XmNwidth = 60;
        XmNheight = 28;
    };
    controls {
    };
    callbacks {
        callbacks WorkStyle2Reasons;
        MrmNcreateCallback = procedure ccb_save_widget_id(GUI_UDP_TB);
    };
!(BX)    handlers {
!(BX)        handlers WorkStyle2Handlers;
!(BX)    };
};

object protocolSEP : XmSeparator widget {
    arguments {
        arguments WorkStyle2;
        XmNx = 10;
        XmNy = 97;
        XmNwidth = 269;
        XmNheight = 20;
    };
    controls {
    };
    callbacks {
        callbacks WorkStyle2Reasons;
    };
!(BX)    handlers {
!(BX)        handlers WorkStyle2Handlers;
!(BX)    };
};

object setPB : XmPushButton widget {
    arguments {
        arguments WorkStyle2;
!(BX)   _XmNlabelString = compound_string("Set Protocol");
        XmNx = 13;
        XmNy = 135;
        XmNwidth = 114;
        XmNheight = 39;
    };
    controls {
    };
    callbacks {
        callbacks WorkStyle2Reasons;
        XmNactivateCallback = procedure cb_protocol_change();
    };
!(BX)    handlers {
!(BX)        handlers WorkStyle2Handlers;
!(BX)    };
};

object cancelPB1 : XmPushButton widget {
    arguments {
        arguments WorkStyle2;
!(BX)   _XmNlabelString = compound_string("Cancel");
        XmNx = 198;
        XmNy = 134;
        XmNwidth = 80;
        XmNheight = 39;
    };
    controls {
    };
    callbacks {
        callbacks WorkStyle2Reasons;
    };
!(BX)    handlers {
!(BX)        handlers WorkStyle2Handlers;
!(BX)    };
};

!(BX)object confirmExitDS : XmDialogShell widget {
!(BX)    arguments {
!(BX)        XmNwidth = 359;
!(BX)        XmNheight = 152;
!(BX)    };
!(BX)    controls {
!(BX)         managed XmMessageDialog confirmExitMessBox;
!(BX)    };
!(BX)    callbacks {
!(BX)    };
!(BX)};

object confirmExitMessBox : XmMessageDialog widget {
    arguments {
        arguments MessageStyle;
!(BX)   _XmNdialogTitle = compound_string("Confirm  Window");
        XmNdialogType = XmDIALOG_QUESTION;
!(BX)   _XmNmessageString = compound_string("This will end your xdevmenu sess" &
!(BX) "ion.", separate=true) &
!(BX) compound_string("", separate=true) &
!(BX) compound_string("Do you want to continue ?");
!(BX)   _XmNokLabelString = compound_string("Exit");
        XmNx = 792;
        XmNy = 783;
        XmNwidth = 359;
        XmNheight = 152;
    };
    controls {
        Xm_Symbol managed {
            arguments {
                arguments MessageStyle;
            };
            callbacks {
                    callbacks MessageStyleReasons;
            };
!(BX)            handlers {
!(BX)                handlers MessageStyleHandlers;
!(BX)            };
        };
        Xm_Separator managed {
            arguments {
                arguments MessageStyle;
            };
            callbacks {
                    callbacks MessageStyleReasons;
            };
!(BX)            handlers {
!(BX)                handlers MessageStyleHandlers;
!(BX)            };
        };
        Xm_Message managed {
            arguments {
                arguments MessageStyle;
            };
            callbacks {
                    callbacks MessageStyleReasons;
            };
!(BX)            handlers {
!(BX)                handlers MessageStyleHandlers;
!(BX)            };
        };
        Xm_OK managed {
            arguments {
                arguments MessageStyle;
            };
            callbacks {
                    callbacks MessageStyleReasons;
            };
!(BX)            handlers {
!(BX)                handlers MessageStyleHandlers;
!(BX)            };
        };
        Xm_Cancel managed {
            arguments {
                arguments MessageStyle;
            };
            callbacks {
                    callbacks MessageStyleReasons;
            };
!(BX)            handlers {
!(BX)                handlers MessageStyleHandlers;
!(BX)            };
        };
        Xm_Help managed {
            arguments {
                arguments MessageStyle;
            };
            callbacks {
                    callbacks MessageStyleReasons;
            };
!(BX)            handlers {
!(BX)                handlers MessageStyleHandlers;
!(BX)            };
        };
    };
    callbacks {
        callbacks MessageStyleReasons;
        MrmNcreateCallback = procedure ccb_confirm_messbox();
        XmNokCallback = procedure BxExitCB(0);
    };
!(BX)    handlers {
!(BX)        handlers MessageStyleHandlers;
!(BX)    };
};

!(BX)object in_argDS : XmDialogShell widget {
!(BX)    arguments {
!(BX)        XmNwidth = 653;
!(BX)        XmNheight = 193;
!(BX)    };
!(BX)    controls {
!(BX)         managed XmFormDialog inarg_form;
!(BX)    };
!(BX)    callbacks {
!(BX)    };
!(BX)};

object inarg_form : XmFormDialog widget {
    arguments {
        arguments WorkStyle2;
        XmNinitialFocus = XmScrolledWindow inarg_value_sw;
        XmNautoUnmanage = false;
!(BX)   _XmNdialogTitle = compound_string("Input   Argument");
        XmNx = 603;
        XmNy = 735;
    };
    controls {
         managed XmPushButton cancelPB;
         managed XmPushButton helpPB;
         managed XmPushButton executePB;
         managed XmScrolledWindow inarg_value_sw;
         managed XmText in_name_text;
    };
    callbacks {
        callbacks WorkStyle2Reasons;
        MrmNcreateCallback = procedure ccb_save_widget_id(GUI_INARG_WIN);
    };
!(BX)    handlers {
!(BX)        handlers WorkStyle2Handlers;
!(BX)    };
};

object in_name_text : XmText widget {
    arguments {
        arguments WorkStyle2;
        XmNshadowThickness = 0;
        XmNvalue = "";
        XmNeditable = false;
        XmNcursorPositionVisible = false;
        XmNleftAttachment = XmATTACH_FORM;
        XmNrightAttachment = XmATTACH_FORM;
        XmNtopOffset = 6;
        XmNleftOffset = 6;
        XmNrightOffset = 41;
        XmNx = 6;
        XmNy = 6;
        XmNwidth = 606;
        XmNheight = 34;
    };
    controls {
    };
    callbacks {
        callbacks WorkStyle2Reasons;
        MrmNcreateCallback = procedure ccb_save_widget_id(GUI_INARG_NAME_TEXT);
    };
!(BX)    handlers {
!(BX)        handlers WorkStyle2Handlers;
!(BX)    };
};

object inarg_value_sw : XmScrolledWindow widget {
    arguments {
        arguments WorkStyle2;
        XmNscrollingPolicy = XmAPPLICATION_DEFINED;
        XmNtopAttachment = XmATTACH_WIDGET;
        XmNbottomAttachment = XmATTACH_WIDGET;
        XmNleftAttachment = XmATTACH_FORM;
        XmNrightAttachment = XmATTACH_FORM;
        XmNtopWidget = XmText in_name_text;
        XmNbottomWidget = XmPushButton helpPB;
        XmNtopOffset = 5;
        XmNbottomOffset = 10;
        XmNleftOffset = 5;
        XmNrightOffset = 22;
        XmNx = 5;
        XmNy = 45;
        XmNwidth = 626;
        XmNheight = 92;
    };
    controls {
         managed XmText inarg_value_text;
    };
    callbacks {
        callbacks WorkStyle2Reasons;
    };
!(BX)    handlers {
!(BX)        handlers WorkStyle2Handlers;
!(BX)    };
};

object inarg_value_text : XmText widget {
    arguments {
        arguments WorkStyle2;
        XmNbackground = color('White Smoke');
        XmNforeground = color('Black');
        XmNvalue = "";
        XmNeditMode = XmMULTI_LINE_EDIT;
        XmNfontList = font_table(
		font('-*-helvetica-bold-r-*-*-*-140-75-75-*-*-iso8859-1'));
    };
    controls {
    };
    callbacks {
        callbacks WorkStyle2Reasons;
        MrmNcreateCallback = procedure ccb_save_widget_id(GUI_INARG_VAL_TEXT);
    };
!(BX)    handlers {
!(BX)        handlers WorkStyle2Handlers;
!(BX)    };
};

object executePB : XmPushButton widget {
    arguments {
        arguments WorkStyle2;
!(BX)   _XmNlabelString = compound_string("Execute  Command");
        XmNtopAttachment = XmATTACH_NONE;
        XmNbottomAttachment = XmATTACH_FORM;
        XmNleftAttachment = XmATTACH_FORM;
        XmNbottomOffset = 10;
        XmNleftOffset = 17;
        XmNx = 17;
        XmNy = 148;
        XmNwidth = 165;
        XmNheight = 35;
    };
    controls {
    };
    callbacks {
        callbacks WorkStyle2Reasons;
       XmNactivateCallback = procedures {
                 BxUnmanageCB("inarg_form");
                 cb_execute_cmd_input();
        };
    };
!(BX)    handlers {
!(BX)        handlers WorkStyle2Handlers;
!(BX)    };
};

object helpPB : XmPushButton widget {
    arguments {
        arguments WorkStyle2;
!(BX)   _XmNlabelString = compound_string("Help");
        XmNtopAttachment = XmATTACH_NONE;
        XmNbottomAttachment = XmATTACH_FORM;
        XmNleftAttachment = XmATTACH_FORM;
        XmNtopOffset = 0;
        XmNbottomOffset = 6;
        XmNleftOffset = 264;
        XmNx = 264;
        XmNy = 147;
        XmNwidth = 91;
        XmNheight = 40;
    };
    controls {
    };
    callbacks {
        callbacks WorkStyle2Reasons;
        XmNactivateCallback = procedure BxManageCB("help_dataBB");
    };
!(BX)    handlers {
!(BX)        handlers WorkStyle2Handlers;
!(BX)    };
};

object cancelPB : XmPushButton widget {
    arguments {
        arguments WorkStyle2;
!(BX)   _XmNlabelString = compound_string("Cancel");
        XmNtopAttachment = XmATTACH_NONE;
        XmNbottomAttachment = XmATTACH_FORM;
        XmNleftAttachment = XmATTACH_NONE;
        XmNrightAttachment = XmATTACH_FORM;
        XmNbottomOffset = 10;
        XmNrightOffset = 28;
        XmNx = 518;
        XmNy = 147;
        XmNwidth = 107;
        XmNheight = 36;
    };
    controls {
    };
    callbacks {
        callbacks WorkStyle2Reasons;
        XmNactivateCallback = procedure BxUnmanageCB("inarg_form");
    };
!(BX)    handlers {
!(BX)        handlers WorkStyle2Handlers;
!(BX)    };
};

!(BX)object help_dataDS : XmDialogShell widget {
!(BX)    arguments {
!(BX)        XmNwidth = 531;
!(BX)        XmNheight = 310;
!(BX)    };
!(BX)    controls {
!(BX)         managed XmBulletinBoardDialog help_dataBB;
!(BX)    };
!(BX)    callbacks {
!(BX)    };
!(BX)};

object help_dataBB : XmBulletinBoardDialog widget {
    arguments {
        arguments WorkStyle2;
        XmNresizePolicy = XmRESIZE_GROW;
!(BX)   _XmNdialogTitle = compound_string("Help  on  Data  Input  Format");
        XmNx = 691;
        XmNy = 759;
        XmNwidth = 531;
        XmNheight = 310;
    };
    controls {
         managed XmPushButton help_data_dismissPB;
         managed XmText help_dataText;
    };
    callbacks {
        callbacks WorkStyle2Reasons;
    };
!(BX)    handlers {
!(BX)        handlers WorkStyle2Handlers;
!(BX)    };
};

object help_dataText : XmText widget {
    arguments {
        arguments WorkStyle2;
        XmNeditMode = XmMULTI_LINE_EDIT;
        XmNautoShowCursorPosition = false;
        XmNeditable = false;
        XmNcursorPositionVisible = false;
        XmNx = 10;
        XmNy = 10;
        XmNwidth = 502;
        XmNheight = 233;
    };
    controls {
    };
    callbacks {
        callbacks WorkStyle2Reasons;
        MrmNcreateCallback = procedure ccb_save_widget_id(GUI_INARG_FORMAT_TEXT);
    };
!(BX)    handlers {
!(BX)        handlers WorkStyle2Handlers;
!(BX)    };
};

object help_data_dismissPB : XmPushButton widget {
    arguments {
        arguments WorkStyle2;
!(BX)   _XmNlabelString = compound_string("Dismiss");
        XmNx = 212;
        XmNy = 252;
        XmNwidth = 123;
        XmNheight = 42;
    };
    controls {
    };
    callbacks {
        callbacks WorkStyle2Reasons;
    };
!(BX)    handlers {
!(BX)        handlers WorkStyle2Handlers;
!(BX)    };
};

!(BX)object ch_timeoutDS : XmDialogShell widget {
!(BX)    arguments {
!(BX)        arguments WorkStyle2;
!(BX)        XmNwidth = 412;
!(BX)        XmNheight = 151;
!(BX)    };
!(BX)    controls {
!(BX)         managed XmSelectionDialog ch_timeout_selbox;
!(BX)    };
!(BX)    callbacks {
!(BX)        callbacks WorkStyle2Reasons;
!(BX)    };
!(BX)    handlers {
!(BX)        handlers WorkStyle2Handlers;
!(BX)    };
!(BX)};

object ch_timeout_selbox : XmSelectionDialog widget {
    arguments {
        arguments WorkStyle2;
!(BX)   _XmNdialogTitle = compound_string("Change  RPC  TimeOut");
!(BX)   _XmNselectionLabelString = compound_string("TimeOut  (ms) :");
!(BX)   _XmNokLabelString = compound_string("Set  TimeOut");
        XmNdialogType = XmDIALOG_PROMPT;
        XmNx = 742;
        XmNy = 745;
        XmNwidth = 412;
        XmNheight = 151;
    };
    controls {
        Xm_Selection managed {
            arguments {
                arguments WorkStyle2;
            };
            callbacks {
                    callbacks WorkStyle2Reasons;
            };
!(BX)            handlers {
!(BX)                handlers WorkStyle2Handlers;
!(BX)            };
        };
        Xm_Text managed {
            arguments {
                arguments WorkStyle2;
            };
            callbacks {
                    callbacks WorkStyle2Reasons;
            };
!(BX)            handlers {
!(BX)                handlers WorkStyle2Handlers;
!(BX)            };
        };
        Xm_Separator managed {
            arguments {
                arguments WorkStyle2;
            };
            callbacks {
                    callbacks WorkStyle2Reasons;
            };
!(BX)            handlers {
!(BX)                handlers WorkStyle2Handlers;
!(BX)            };
        };
        Xm_OK managed {
            arguments {
                arguments WorkStyle2;
            };
            callbacks {
                    callbacks WorkStyle2Reasons;
            };
!(BX)            handlers {
!(BX)                handlers WorkStyle2Handlers;
!(BX)            };
        };
        Xm_Cancel managed {
            arguments {
                arguments WorkStyle2;
            };
            callbacks {
                    callbacks WorkStyle2Reasons;
            };
!(BX)            handlers {
!(BX)                handlers WorkStyle2Handlers;
!(BX)            };
        };
        Xm_Help managed {
            arguments {
                arguments WorkStyle2;
            };
            callbacks {
                    callbacks WorkStyle2Reasons;
            };
!(BX)            handlers {
!(BX)                handlers WorkStyle2Handlers;
!(BX)            };
        };
        Xm_Apply unmanaged {
            arguments {
                arguments WorkStyle2;
            };
            callbacks {
                    callbacks WorkStyle2Reasons;
            };
!(BX)            handlers {
!(BX)                handlers WorkStyle2Handlers;
!(BX)            };
        };
    };
    callbacks {
        callbacks WorkStyle2Reasons;
       MrmNcreateCallback = procedures {
                 ccb_timeout_prompt();
                 ccb_save_widget_id(GUI_TIMEOUT_SELBOX);
        };
        XmNokCallback = procedure cb_change_timeout();
    };
!(BX)    handlers {
!(BX)        handlers WorkStyle2Handlers;
!(BX)    };
};

!(BX)object help_appliDS : XmDialogShell widget {
!(BX)    arguments {
!(BX)        arguments WorkStyle2;
!(BX)        _XmNtitle = "Xdevmenu  Help";
!(BX)        XmNwidth = 547;
!(BX)        XmNheight = 387;
!(BX)    };
!(BX)    controls {
!(BX)         managed XmBulletinBoardDialog help_appliBB;
!(BX)    };
!(BX)    callbacks {
!(BX)        callbacks WorkStyle2Reasons;
!(BX)    };
!(BX)    handlers {
!(BX)        handlers WorkStyle2Handlers;
!(BX)    };
!(BX)};

object help_appliBB : XmBulletinBoardDialog widget {
    arguments {
        arguments WorkStyle2;
        XmNresizePolicy = XmRESIZE_GROW;
        XmNx = 690;
        XmNy = 728;
        XmNwidth = 547;
        XmNheight = 387;
    };
    controls {
         managed XmScrolledWindow help_appliSW;
         managed XmPushButton appli_dismissPB;
    };
    callbacks {
        callbacks WorkStyle2Reasons;
    };
!(BX)    handlers {
!(BX)        handlers WorkStyle2Handlers;
!(BX)    };
};

object appli_dismissPB : XmPushButton widget {
    arguments {
        arguments WorkStyle2;
!(BX)   _XmNlabelString = compound_string("Dismiss");
        XmNx = 211;
        XmNy = 329;
        XmNwidth = 123;
        XmNheight = 42;
    };
    controls {
    };
    callbacks {
        callbacks WorkStyle2Reasons;
    };
!(BX)    handlers {
!(BX)        handlers WorkStyle2Handlers;
!(BX)    };
};

object help_appliSW : XmScrolledWindow widget {
    arguments {
        arguments WorkStyle2;
        XmNscrollingPolicy = XmAPPLICATION_DEFINED;
        XmNx = 10;
        XmNy = 26;
        XmNwidth = 525;
        XmNheight = 295;
    };
    controls {
         managed XmText help_appli_text;
    };
    callbacks {
        callbacks WorkStyle2Reasons;
    };
!(BX)    handlers {
!(BX)        handlers WorkStyle2Handlers;
!(BX)    };
};

object help_appli_text : XmText widget {
    arguments {
        arguments WorkStyle2;
!(BX)   _XmNvalue = "XDEVMENU\n\
!(BX)                    " &
!(BX) "       \n\
!(BX)Xdevmenu is a generic application which provides the means " &
!(BX) "to\n\
!(BX)make synchronous calls to the device servers and to execute the\n\
!(BX)s" &
!(BX) "erver commands on a device.\n\
!(BX)\n\
!(BX)1) The user should first import the" &
!(BX) " device (File pulldown menu).\n\
!(BX)\n\
!(BX)2) Next click on the icon represe" &
!(BX) "nting the device which has just been\n\
!(BX)imported. This will highlight " &
!(BX) "the device and popup a window with\n\
!(BX)a list of available commands for" &
!(BX) " that device.\n\
!(BX)\n\
!(BX)3) You can now execute one of the commands in thi" &
!(BX) "s list.\n\
!(BX)     Two cases are possible :\n\
!(BX)      A) The command does " &
!(BX) "not need any input argument. In\n\
!(BX)           this case the command is" &
!(BX) " executed immediately.\n\
!(BX)      B) The command needs an input argument" &
!(BX) ". In this case\n\
!(BX)            you will be prompted with a window to en" &
!(BX) "ter the\n\
!(BX)           value of the input argument. When you click on t" &
!(BX) "he\n\
!(BX)           \"execute\" pushbutton of this input window the\n\
!(BX)  " &
!(BX) "         command will finally be executed.\n\
!(BX)\n\
!(BX)4) Once the command " &
!(BX) "is executed the output of the command\n\
!(BX)     or the error message ret" &
!(BX) "urned by it will be displayed in\n\
!(BX)     the bottom part of the main w" &
!(BX) "indow.  The error messages\n\
!(BX)     are predeeded by the string \"!!! e" &
!(BX) "rror !!!\" to distinguish them\n\
!(BX)     from normal command outputs.\n\
!(BX)\n\
!(BX)5" &
!(BX) ") If you select \"Change RPC Timeout\" and / or\n\
!(BX)    \"Change RPC Pr" &
!(BX) "otocol\" from the \"Commands\" pulldown\n\
!(BX)    menu you can execute re" &
!(BX) "spectively either\n\
!(BX)    dev_rpc_timeout  or  dev_rpc_protocol for the" &
!(BX) " selected\n\
!(BX)    device<--> client connection.\n\
!(BX)\n\
!(BX)6) If you select" &
!(BX) " \"Device Info\" from the \"View\" pulldown\n\
!(BX)    menu or you double " &
!(BX) "click on an icon you are poped up\n\
!(BX)    with a window containing all " &
!(BX) "information about the selected\n\
!(BX)    device.";
        XmNeditMode = XmMULTI_LINE_EDIT;
        XmNautoShowCursorPosition = false;
        XmNeditable = false;
        XmNcursorPositionVisible = false;
    };
    controls {
    };
    callbacks {
        callbacks WorkStyle2Reasons;
    };
!(BX)    handlers {
!(BX)        handlers WorkStyle2Handlers;
!(BX)    };
};

!(BX)object errorDS : XmDialogShell widget {
!(BX)    arguments {
!(BX)        _XmNtitle = "Error  Dialog";
!(BX)        XmNwidth = 485;
!(BX)        XmNheight = 115;
!(BX)    };
!(BX)    controls {
!(BX)         managed XmMessageDialog errorMessBox;
!(BX)    };
!(BX)    callbacks {
!(BX)    };
!(BX)};

object errorMessBox : XmMessageDialog widget {
    arguments {
        arguments MessageStyle;
        XmNdialogType = XmDIALOG_ERROR;
        XmNmessageString = compound_string("This is an error message! An err" &
 "or has just happened.");
        XmNx = 715;
        XmNy = 777;
        XmNwidth = 485;
        XmNheight = 115;
    };
    controls {
        Xm_Symbol managed {
            arguments {
                arguments MessageStyle;
            };
            callbacks {
                    callbacks MessageStyleReasons;
            };
!(BX)            handlers {
!(BX)                handlers MessageStyleHandlers;
!(BX)            };
        };
        Xm_Separator managed {
            arguments {
                arguments MessageStyle;
            };
            callbacks {
                    callbacks MessageStyleReasons;
            };
!(BX)            handlers {
!(BX)                handlers MessageStyleHandlers;
!(BX)            };
        };
        Xm_Message managed {
            arguments {
                arguments MessageStyle;
            };
            callbacks {
                    callbacks MessageStyleReasons;
            };
!(BX)            handlers {
!(BX)                handlers MessageStyleHandlers;
!(BX)            };
        };
        Xm_OK managed {
            arguments {
                arguments MessageStyle;
            };
            callbacks {
                    callbacks MessageStyleReasons;
            };
!(BX)            handlers {
!(BX)                handlers MessageStyleHandlers;
!(BX)            };
        };
        Xm_Cancel managed {
            arguments {
                arguments MessageStyle;
            };
            callbacks {
                    callbacks MessageStyleReasons;
            };
!(BX)            handlers {
!(BX)                handlers MessageStyleHandlers;
!(BX)            };
        };
        Xm_Help managed {
            arguments {
                arguments MessageStyle;
            };
            callbacks {
                    callbacks MessageStyleReasons;
            };
!(BX)            handlers {
!(BX)                handlers MessageStyleHandlers;
!(BX)            };
        };
    };
    callbacks {
        callbacks MessageStyleReasons;
       MrmNcreateCallback = procedures {
                 ccb_save_widget_id(GUI_ERROR_WINDOW);
                 ccb_error_messbox();
        };
    };
!(BX)    handlers {
!(BX)        handlers MessageStyleHandlers;
!(BX)    };
};

!(BX)object help_versionDS : XmDialogShell widget {
!(BX)    arguments {
!(BX)        _XmNtitle = "Version";
!(BX)        XmNwidth = 340;
!(BX)        XmNheight = 322;
!(BX)    };
!(BX)    controls {
!(BX)         managed XmBulletinBoardDialog help_versionBB;
!(BX)    };
!(BX)    callbacks {
!(BX)    };
!(BX)};

object help_versionBB : XmBulletinBoardDialog widget {
    arguments {
        arguments WorkStyle2;
        XmNresizePolicy = XmRESIZE_GROW;
        XmNx = 797;
        XmNy = 729;
        XmNwidth = 340;
        XmNheight = 322;
    };
    controls {
         managed XmPushButton version_dismissPB;
         managed XmText help_versionText;
    };
    callbacks {
        callbacks WorkStyle2Reasons;
        MrmNcreateCallback = procedure ccb_save_widget_id(GUI_HELP_VERS_BB);
    };
!(BX)    handlers {
!(BX)        handlers WorkStyle2Handlers;
!(BX)    };
};

object help_versionText : XmText widget {
    arguments {
        arguments WorkStyle2;
        XmNeditMode = XmMULTI_LINE_EDIT;
        XmNautoShowCursorPosition = false;
        XmNeditable = false;
        XmNcursorPositionVisible = false;
        XmNx = 10;
        XmNy = 10;
        XmNwidth = 320;
        XmNheight = 233;
    };
    controls {
    };
    callbacks {
        callbacks WorkStyle2Reasons;
       MrmNcreateCallback = procedures {
                 ccb_save_widget_id(GUI_HELP_VERS_TEXT);
                 ccb_help_version_text();
        };
    };
!(BX)    handlers {
!(BX)        handlers WorkStyle2Handlers;
!(BX)    };
};

object version_dismissPB : XmPushButton widget {
    arguments {
        arguments WorkStyle2;
!(BX)   _XmNlabelString = compound_string("Dismiss");
        XmNx = 110;
        XmNy = 260;
        XmNwidth = 123;
        XmNheight = 42;
    };
    controls {
    };
    callbacks {
        callbacks WorkStyle2Reasons;
    };
!(BX)    handlers {
!(BX)        handlers WorkStyle2Handlers;
!(BX)    };
};

!(BX)object dev_infoDS : XmDialogShell widget {
!(BX)    arguments {
!(BX)        _XmNtitle = "Device  Information";
!(BX)        XmNwidth = 348;
!(BX)        XmNheight = 285;
!(BX)    };
!(BX)    controls {
!(BX)         managed XmBulletinBoardDialog dev_infoBB;
!(BX)    };
!(BX)    callbacks {
!(BX)    };
!(BX)};

object dev_infoBB : XmBulletinBoardDialog widget {
    arguments {
        arguments WorkStyle2;
        XmNresizePolicy = XmRESIZE_GROW;
        XmNx = 787;
        XmNy = 714;
        XmNwidth = 348;
        XmNheight = 285;
    };
    controls {
         managed XmPushButton dismissPB;
         managed XmSeparator dev_infoSep;
         managed XmText svc_hostText;
         managed XmLabel svc_hostLabel;
         managed XmText svc_nameText;
         managed XmLabel svc_nameLabel;
         managed XmText dev_typeText;
         managed XmLabel dev_typeLabel;
         managed XmText dev_classText;
         managed XmLabel dev_classLabel;
         managed XmText dev_nameText;
         managed XmLabel dev_nameLabel;
    };
    callbacks {
        callbacks WorkStyle2Reasons;
        MrmNcreateCallback = procedure ccb_save_widget_id(GUI_DEVINFO_BB);
    };
!(BX)    handlers {
!(BX)        handlers WorkStyle2Handlers;
!(BX)    };
};

object dev_nameLabel : XmLabel widget {
    arguments {
        arguments WorkStyle2;
        XmNalignment = XmALIGNMENT_END;
!(BX)   _XmNfontList = font_table(
!(BX)		font('-*-helvetica-medium-r-*-*-*-180-75-75-*-*-iso8859-1'));
!(BX)   _XmNlabelString = compound_string("Name :");
        XmNx = 20;
        XmNy = 16;
        XmNwidth = 123;
        XmNheight = 24;
    };
    controls {
    };
    callbacks {
        callbacks WorkStyle2Reasons;
    };
!(BX)    handlers {
!(BX)        handlers WorkStyle2Handlers;
!(BX)    };
};

object dev_nameText : XmText widget {
    arguments {
        arguments WorkStyle2;
        XmNhighlightThickness = 0;
        XmNshadowThickness = 0;
!(BX)   _XmNvalue = "sr/bench/fp";
        XmNautoShowCursorPosition = false;
        XmNeditable = false;
!(BX)   _XmNfontList = font_table(
!(BX)		font('-*-times-medium-r-*-*-*-180-75-75-*-*-iso8859-1'));
        XmNcursorPositionVisible = false;
        XmNx = 158;
        XmNy = 14;
        XmNwidth = 170;
        XmNheight = 31;
    };
    controls {
    };
    callbacks {
        callbacks WorkStyle2Reasons;
        MrmNcreateCallback = procedure ccb_save_widget_id(GUI_DEVINFO_NAME_TEXT);
    };
!(BX)    handlers {
!(BX)        handlers WorkStyle2Handlers;
!(BX)    };
};

object dev_classLabel : XmLabel widget {
    arguments {
        arguments WorkStyle2;
        XmNalignment = XmALIGNMENT_END;
!(BX)   _XmNfontList = font_table(
!(BX)		font('-*-helvetica-medium-r-*-*-*-180-75-75-*-*-iso8859-1'));
!(BX)   _XmNlabelString = compound_string("Class :");
        XmNx = 19;
        XmNy = 48;
        XmNwidth = 124;
        XmNheight = 24;
    };
    controls {
    };
    callbacks {
        callbacks WorkStyle2Reasons;
    };
!(BX)    handlers {
!(BX)        handlers WorkStyle2Handlers;
!(BX)    };
};

object dev_classText : XmText widget {
    arguments {
        arguments WorkStyle2;
        XmNhighlightThickness = 0;
        XmNshadowThickness = 0;
!(BX)   _XmNvalue = "Bench";
        XmNautoShowCursorPosition = false;
        XmNeditable = false;
!(BX)   _XmNfontList = font_table(
!(BX)		font('-*-times-medium-r-*-*-*-180-75-75-*-*-iso8859-1'));
        XmNcursorPositionVisible = false;
        XmNx = 158;
        XmNy = 46;
        XmNwidth = 170;
        XmNheight = 31;
    };
    controls {
    };
    callbacks {
        callbacks WorkStyle2Reasons;
        MrmNcreateCallback = procedure ccb_save_widget_id(GUI_DEVINFO_CLASS_TEXT);
    };
!(BX)    handlers {
!(BX)        handlers WorkStyle2Handlers;
!(BX)    };
};

object dev_typeLabel : XmLabel widget {
    arguments {
        arguments WorkStyle2;
        XmNalignment = XmALIGNMENT_END;
!(BX)   _XmNfontList = font_table(
!(BX)		font('-*-helvetica-medium-r-*-*-*-180-75-75-*-*-iso8859-1'));
!(BX)   _XmNlabelString = compound_string("Type :");
        XmNx = 20;
        XmNy = 81;
        XmNwidth = 123;
        XmNheight = 24;
    };
    controls {
    };
    callbacks {
        callbacks WorkStyle2Reasons;
    };
!(BX)    handlers {
!(BX)        handlers WorkStyle2Handlers;
!(BX)    };
};

object dev_typeText : XmText widget {
    arguments {
        arguments WorkStyle2;
        XmNhighlightThickness = 0;
        XmNshadowThickness = 0;
!(BX)   _XmNvalue = "DevType_Default";
        XmNautoShowCursorPosition = false;
        XmNeditable = false;
!(BX)   _XmNfontList = font_table(
!(BX)		font('-*-times-medium-r-*-*-*-180-75-75-*-*-iso8859-1'));
        XmNcursorPositionVisible = false;
        XmNx = 158;
        XmNy = 79;
        XmNwidth = 170;
        XmNheight = 31;
    };
    controls {
    };
    callbacks {
        callbacks WorkStyle2Reasons;
        MrmNcreateCallback = procedure ccb_save_widget_id(GUI_DEVINFO_TYPE_TEXT);
    };
!(BX)    handlers {
!(BX)        handlers WorkStyle2Handlers;
!(BX)    };
};

object svc_nameLabel : XmLabel widget {
    arguments {
        arguments WorkStyle2;
        XmNalignment = XmALIGNMENT_END;
!(BX)   _XmNfontList = font_table(
!(BX)		font('-*-helvetica-medium-r-*-*-*-180-75-75-*-*-iso8859-1'));
!(BX)   _XmNlabelString = compound_string("server  name :");
        XmNx = 17;
        XmNy = 114;
        XmNwidth = 126;
        XmNheight = 24;
    };
    controls {
    };
    callbacks {
        callbacks WorkStyle2Reasons;
    };
!(BX)    handlers {
!(BX)        handlers WorkStyle2Handlers;
!(BX)    };
};

object svc_nameText : XmText widget {
    arguments {
        arguments WorkStyle2;
        XmNhighlightThickness = 0;
        XmNshadowThickness = 0;
!(BX)   _XmNvalue = "bench/fp";
        XmNautoShowCursorPosition = false;
        XmNeditable = false;
!(BX)   _XmNfontList = font_table(
!(BX)		font('-*-times-medium-r-*-*-*-180-75-75-*-*-iso8859-1'));
        XmNcursorPositionVisible = false;
        XmNx = 158;
        XmNy = 111;
        XmNwidth = 170;
        XmNheight = 31;
    };
    controls {
    };
    callbacks {
        callbacks WorkStyle2Reasons;
        MrmNcreateCallback = procedure ccb_save_widget_id(GUI_DEVINFO_SERVNAME_TEXT);
    };
!(BX)    handlers {
!(BX)        handlers WorkStyle2Handlers;
!(BX)    };
};

object svc_hostLabel : XmLabel widget {
    arguments {
        arguments WorkStyle2;
        XmNalignment = XmALIGNMENT_END;
!(BX)   _XmNfontList = font_table(
!(BX)		font('-*-helvetica-medium-r-*-*-*-180-75-75-*-*-iso8859-1'));
!(BX)   _XmNlabelString = compound_string("server  host :");
        XmNx = 23;
        XmNy = 145;
        XmNwidth = 120;
        XmNheight = 24;
    };
    controls {
    };
    callbacks {
        callbacks WorkStyle2Reasons;
    };
!(BX)    handlers {
!(BX)        handlers WorkStyle2Handlers;
!(BX)    };
};

object svc_hostText : XmText widget {
    arguments {
        arguments WorkStyle2;
        XmNhighlightThickness = 0;
        XmNshadowThickness = 0;
!(BX)   _XmNvalue = "libra";
        XmNautoShowCursorPosition = false;
        XmNeditable = false;
!(BX)   _XmNfontList = font_table(
!(BX)		font('-*-times-medium-r-*-*-*-180-75-75-*-*-iso8859-1'));
        XmNcursorPositionVisible = false;
        XmNx = 158;
        XmNy = 143;
        XmNwidth = 170;
        XmNheight = 31;
    };
    controls {
    };
    callbacks {
        callbacks WorkStyle2Reasons;
        MrmNcreateCallback = procedure ccb_save_widget_id(GUI_DEVINFO_HOST_TEXT);
    };
!(BX)    handlers {
!(BX)        handlers WorkStyle2Handlers;
!(BX)    };
};

object dev_infoSep : XmSeparator widget {
    arguments {
        arguments WorkStyle2;
        XmNx = 10;
        XmNy = 193;
        XmNwidth = 301;
        XmNheight = 24;
    };
    controls {
    };
    callbacks {
        callbacks WorkStyle2Reasons;
    };
!(BX)    handlers {
!(BX)        handlers WorkStyle2Handlers;
!(BX)    };
};

object dismissPB : XmPushButton widget {
    arguments {
        arguments WorkStyle2;
!(BX)   _XmNlabelString = compound_string("Dismiss");
        XmNx = 96;
        XmNy = 225;
        XmNwidth = 123;
        XmNheight = 42;
    };
    controls {
    };
    callbacks {
        callbacks WorkStyle2Reasons;
    };
!(BX)    handlers {
!(BX)        handlers WorkStyle2Handlers;
!(BX)    };
};

!(BX)object commandDS : XmDialogShell widget {
!(BX)    arguments {
!(BX)        _XmNtitle = "Device  Commands";
!(BX)        XmNwidth = 295;
!(BX)        XmNheight = 367;
!(BX)    };
!(BX)    controls {
!(BX)         managed XmSelectionDialog commandSelBox;
!(BX)    };
!(BX)    callbacks {
!(BX)    };
!(BX)};

object commandSelBox : XmSelectionDialog widget {
    arguments {
        arguments WorkStyle2;
        XmNautoUnmanage = false;
!(BX)   _XmNselectionLabelString = compound_string("Selected command :");
!(BX)   _XmNlistLabelString = compound_string("Available commands :");
        XmNlistItems = string_table(
	compound_string("item1  device server cmd"),
	compound_string("item2 device server cmd"),
	compound_string("item3 device server cmd"),
	compound_string("item4 device server cmd"),
	compound_string("item5 device server cmd"),
	compound_string("item6 device server cmd"),
	compound_string("item7 device server cmd"));
        XmNlistItemCount = 7;
!(BX)   _XmNokLabelString = compound_string("Execute");
!(BX)   _XmNcancelLabelString = compound_string("Close");
        XmNx = 801;
        XmNy = 702;
        XmNwidth = 295;
        XmNheight = 367;
    };
    controls {
        Xm_Items managed {
            arguments {
                arguments WorkStyle2;
            };
            callbacks {
                    callbacks WorkStyle2Reasons;
            };
!(BX)            handlers {
!(BX)                handlers WorkStyle2Handlers;
!(BX)            };
        };
        Xm_ItemsList managed {
            arguments {
                arguments WorkStyle2;
            };
            callbacks {
                    callbacks WorkStyle2Reasons;
            };
!(BX)            handlers {
!(BX)                handlers WorkStyle2Handlers;
!(BX)            };
        };
        Xm_Selection managed {
            arguments {
                arguments WorkStyle2;
            };
            callbacks {
                    callbacks WorkStyle2Reasons;
            };
!(BX)            handlers {
!(BX)                handlers WorkStyle2Handlers;
!(BX)            };
        };
        Xm_Text managed {
            arguments {
                arguments WorkStyle2;
            };
            callbacks {
                    callbacks WorkStyle2Reasons;
            };
!(BX)            handlers {
!(BX)                handlers WorkStyle2Handlers;
!(BX)            };
        };
        Xm_Separator managed {
            arguments {
                arguments WorkStyle2;
            };
            callbacks {
                    callbacks WorkStyle2Reasons;
            };
!(BX)            handlers {
!(BX)                handlers WorkStyle2Handlers;
!(BX)            };
        };
        Xm_OK managed {
            arguments {
                arguments WorkStyle2;
            };
            callbacks {
                    callbacks WorkStyle2Reasons;
            };
!(BX)            handlers {
!(BX)                handlers WorkStyle2Handlers;
!(BX)            };
        };
        Xm_Cancel managed {
            arguments {
                arguments WorkStyle2;
            };
            callbacks {
                    callbacks WorkStyle2Reasons;
            };
!(BX)            handlers {
!(BX)                handlers WorkStyle2Handlers;
!(BX)            };
        };
        Xm_Help managed {
            arguments {
                arguments WorkStyle2;
            };
            callbacks {
                    callbacks WorkStyle2Reasons;
            };
!(BX)            handlers {
!(BX)                handlers WorkStyle2Handlers;
!(BX)            };
        };
        Xm_Apply unmanaged {
            arguments {
                arguments WorkStyle2;
            };
            callbacks {
                    callbacks WorkStyle2Reasons;
            };
!(BX)            handlers {
!(BX)                handlers WorkStyle2Handlers;
!(BX)            };
        };
    };
    callbacks {
        callbacks WorkStyle2Reasons;
       MrmNcreateCallback = procedures {
                 ccb_save_widget_id(GUI_COMMAND_SELBOX);
                 ccb_cmd_sel_box();
        };
        XmNokCallback = procedure cb_execute_cmd();
        XmNcancelCallback = procedure BxUnmanageCB("commandSelBox");
    };
!(BX)    handlers {
!(BX)        handlers WorkStyle2Handlers;
!(BX)    };
};

!(BX)object confirmCloseDS : XmDialogShell widget {
!(BX)    arguments {
!(BX)        XmNwidth = 539;
!(BX)        XmNheight = 135;
!(BX)    };
!(BX)    controls {
!(BX)         managed XmMessageDialog confirmCloseMessBox;
!(BX)    };
!(BX)    callbacks {
!(BX)    };
!(BX)};

object confirmCloseMessBox : XmMessageDialog widget {
    arguments {
        arguments MessageStyle;
!(BX)   _XmNdialogTitle = compound_string("Confirm  Window");
        XmNdialogType = XmDIALOG_QUESTION;
!(BX)   _XmNmessageString = compound_string("Do you really want to close the " &
!(BX) "connection to this device?");
        XmNx = 692;
        XmNy = 801;
        XmNwidth = 539;
        XmNheight = 135;
    };
    controls {
        Xm_Symbol managed {
            arguments {
                arguments MessageStyle;
            };
            callbacks {
                    callbacks MessageStyleReasons;
            };
!(BX)            handlers {
!(BX)                handlers MessageStyleHandlers;
!(BX)            };
        };
        Xm_Separator managed {
            arguments {
                arguments MessageStyle;
            };
            callbacks {
                    callbacks MessageStyleReasons;
            };
!(BX)            handlers {
!(BX)                handlers MessageStyleHandlers;
!(BX)            };
        };
        Xm_Message managed {
            arguments {
                arguments MessageStyle;
            };
            callbacks {
                    callbacks MessageStyleReasons;
            };
!(BX)            handlers {
!(BX)                handlers MessageStyleHandlers;
!(BX)            };
        };
        Xm_OK managed {
            arguments {
                arguments MessageStyle;
            };
            callbacks {
                    callbacks MessageStyleReasons;
            };
!(BX)            handlers {
!(BX)                handlers MessageStyleHandlers;
!(BX)            };
        };
        Xm_Cancel managed {
            arguments {
                arguments MessageStyle;
            };
            callbacks {
                    callbacks MessageStyleReasons;
            };
!(BX)            handlers {
!(BX)                handlers MessageStyleHandlers;
!(BX)            };
        };
        Xm_Help managed {
            arguments {
                arguments MessageStyle;
            };
            callbacks {
                    callbacks MessageStyleReasons;
            };
!(BX)            handlers {
!(BX)                handlers MessageStyleHandlers;
!(BX)            };
        };
    };
    callbacks {
        callbacks MessageStyleReasons;
        MrmNcreateCallback = procedure ccb_confirm_messbox();
        XmNokCallback = procedure cb_close_device();
    };
!(BX)    handlers {
!(BX)        handlers MessageStyleHandlers;
!(BX)    };
};

!(BX)object dev_importDS : XmDialogShell widget {
!(BX)    arguments {
!(BX)        _XmNtitle = "Import  Device";
!(BX)        XmNwidth = 362;
!(BX)        XmNheight = 577;
!(BX)    };
!(BX)    controls {
!(BX)         managed XmFormDialog dev_importForm;
!(BX)    };
!(BX)    callbacks {
!(BX)    };
!(BX)};

object dev_importForm : XmFormDialog widget {
    arguments {
        arguments WorkStyle2;
        XmNautoUnmanage = false;
        XmNresizePolicy = XmRESIZE_GROW;
        XmNx = 757;
        XmNy = 781;
        XmNwidth = 362;
        XmNheight = 577;
    };
    controls {
         managed XmSelectionBox dev_import_SelBox;
         managed XmSeparator dev_importSep;
         managed XmForm dev_filterForm;
    };
    callbacks {
        callbacks WorkStyle2Reasons;
        MrmNcreateCallback = procedure ccb_save_widget_id(GUI_IMPORT_FORM);
    };
!(BX)    handlers {
!(BX)        handlers WorkStyle2Handlers;
!(BX)    };
};

object dev_filterForm : XmForm widget {
    arguments {
        arguments WorkStyle2;
        XmNresizePolicy = XmRESIZE_GROW;
        XmNtopAttachment = XmATTACH_FORM;
        XmNbottomAttachment = XmATTACH_NONE;
        XmNleftAttachment = XmATTACH_FORM;
        XmNrightAttachment = XmATTACH_FORM;
        XmNtopOffset = 6;
        XmNleftOffset = 10;
        XmNrightOffset = 15;
        XmNx = 10;
        XmNy = 6;
        XmNwidth = 337;
        XmNheight = 160;
    };
    controls {
         managed XmText memberText;
         managed XmText familyText;
         managed XmText domainText;
         managed XmLabel memberLabel;
         managed XmLabel familyLabel;
         managed XmLabel domainLabel;
    };
    callbacks {
        callbacks WorkStyle2Reasons;
    };
!(BX)    handlers {
!(BX)        handlers WorkStyle2Handlers;
!(BX)    };
};

object domainLabel : XmLabel widget {
    arguments {
        arguments WorkStyle2;
        XmNalignment = XmALIGNMENT_BEGINNING;
!(BX)   _XmNlabelString = compound_string("Domain");
        XmNleftAttachment = XmATTACH_FORM;
        XmNtopOffset = 17;
        XmNleftOffset = 15;
        XmNx = 15;
        XmNy = 17;
        XmNwidth = 133;
        XmNheight = 40;
    };
    controls {
    };
    callbacks {
        callbacks WorkStyle2Reasons;
    };
!(BX)    handlers {
!(BX)        handlers WorkStyle2Handlers;
!(BX)    };
};

object familyLabel : XmLabel widget {
    arguments {
        arguments WorkStyle2;
        XmNalignment = XmALIGNMENT_BEGINNING;
!(BX)   _XmNlabelString = compound_string("Family");
        XmNleftAttachment = XmATTACH_FORM;
        XmNtopOffset = 66;
        XmNleftOffset = 15;
        XmNx = 15;
        XmNy = 66;
        XmNwidth = 133;
        XmNheight = 40;
    };
    controls {
    };
    callbacks {
        callbacks WorkStyle2Reasons;
    };
!(BX)    handlers {
!(BX)        handlers WorkStyle2Handlers;
!(BX)    };
};

object memberLabel : XmLabel widget {
    arguments {
        arguments WorkStyle2;
        XmNalignment = XmALIGNMENT_BEGINNING;
!(BX)   _XmNlabelString = compound_string("Member");
        XmNleftAttachment = XmATTACH_FORM;
        XmNtopOffset = 114;
        XmNleftOffset = 15;
        XmNx = 15;
        XmNy = 114;
        XmNwidth = 133;
        XmNheight = 40;
    };
    controls {
    };
    callbacks {
        callbacks WorkStyle2Reasons;
    };
!(BX)    handlers {
!(BX)        handlers WorkStyle2Handlers;
!(BX)    };
};

object domainText : XmText widget {
    arguments {
        arguments WorkStyle2;
!(BX)   _XmNvalue = "*";
        XmNleftAttachment = XmATTACH_FORM;
        XmNrightAttachment = XmATTACH_FORM;
        XmNtopOffset = 20;
        XmNleftOffset = 154;
        XmNrightOffset = 10;
        XmNx = 154;
        XmNy = 20;
        XmNwidth = 173;
        XmNheight = 35;
    };
    controls {
    };
    callbacks {
        callbacks WorkStyle2Reasons;
        MrmNcreateCallback = procedure ccb_save_widget_id(GUI_DOMAIN_TEXT);
    };
!(BX)    handlers {
!(BX)        handlers WorkStyle2Handlers;
!(BX)    };
};

object familyText : XmText widget {
    arguments {
        arguments WorkStyle2;
!(BX)   _XmNvalue = "*";
        XmNleftAttachment = XmATTACH_FORM;
        XmNrightAttachment = XmATTACH_FORM;
        XmNtopOffset = 69;
        XmNleftOffset = 154;
        XmNrightOffset = 10;
        XmNx = 154;
        XmNy = 69;
        XmNwidth = 173;
        XmNheight = 35;
    };
    controls {
    };
    callbacks {
        callbacks WorkStyle2Reasons;
        MrmNcreateCallback = procedure ccb_save_widget_id(GUI_FAMILY_TEXT);
    };
!(BX)    handlers {
!(BX)        handlers WorkStyle2Handlers;
!(BX)    };
};

object memberText : XmText widget {
    arguments {
        arguments WorkStyle2;
!(BX)   _XmNvalue = "*";
        XmNleftAttachment = XmATTACH_FORM;
        XmNrightAttachment = XmATTACH_FORM;
        XmNtopOffset = 119;
        XmNleftOffset = 155;
        XmNrightOffset = 10;
        XmNx = 155;
        XmNy = 119;
        XmNwidth = 172;
        XmNheight = 35;
    };
    controls {
    };
    callbacks {
        callbacks WorkStyle2Reasons;
        MrmNcreateCallback = procedure ccb_save_widget_id(GUI_MEMBER_TEXT);
    };
!(BX)    handlers {
!(BX)        handlers WorkStyle2Handlers;
!(BX)    };
};

object dev_importSep : XmSeparator widget {
    arguments {
        arguments WorkStyle2;
        XmNleftAttachment = XmATTACH_FORM;
        XmNrightAttachment = XmATTACH_FORM;
        XmNtopOffset = 170;
        XmNleftOffset = 9;
        XmNrightOffset = 17;
        XmNx = 9;
        XmNy = 170;
        XmNwidth = 336;
        XmNheight = 23;
    };
    controls {
    };
    callbacks {
        callbacks WorkStyle2Reasons;
    };
!(BX)    handlers {
!(BX)        handlers WorkStyle2Handlers;
!(BX)    };
};

object dev_import_SelBox : XmSelectionBox widget {
    arguments {
        arguments WorkStyle2;
!(BX)   _XmNselectionLabelString = compound_string("Device to import :");
!(BX)   _XmNlistLabelString = compound_string("Devices");
!(BX)   _XmNokLabelString = compound_string("Import");
!(BX)   _XmNcancelLabelString = compound_string("Close");
!(BX)   _XmNhelpLabelString = compound_string("Filter");
        XmNtopAttachment = XmATTACH_FORM;
        XmNbottomAttachment = XmATTACH_FORM;
        XmNleftAttachment = XmATTACH_FORM;
        XmNrightAttachment = XmATTACH_FORM;
        XmNtopOffset = 204;
        XmNbottomOffset = 8;
        XmNleftOffset = 22;
        XmNrightOffset = 10;
        XmNx = 22;
        XmNy = 204;
        XmNwidth = 330;
        XmNheight = 365;
    };
    controls {
        Xm_Items managed {
            arguments {
                arguments WorkStyle2;
            };
            callbacks {
                    callbacks WorkStyle2Reasons;
            };
!(BX)            handlers {
!(BX)                handlers WorkStyle2Handlers;
!(BX)            };
        };
        Xm_ItemsList managed {
            arguments {
                arguments WorkStyle2;
            };
            callbacks {
                    callbacks WorkStyle2Reasons;
            };
!(BX)            handlers {
!(BX)                handlers WorkStyle2Handlers;
!(BX)            };
        };
        Xm_Selection managed {
            arguments {
                arguments WorkStyle2;
            };
            callbacks {
                    callbacks WorkStyle2Reasons;
            };
!(BX)            handlers {
!(BX)                handlers WorkStyle2Handlers;
!(BX)            };
        };
        Xm_Text managed {
            arguments {
                arguments WorkStyle2;
            };
            callbacks {
                    callbacks WorkStyle2Reasons;
            };
!(BX)            handlers {
!(BX)                handlers WorkStyle2Handlers;
!(BX)            };
        };
        Xm_Separator managed {
            arguments {
                arguments WorkStyle2;
            };
            callbacks {
                    callbacks WorkStyle2Reasons;
            };
!(BX)            handlers {
!(BX)                handlers WorkStyle2Handlers;
!(BX)            };
        };
        Xm_OK managed {
            arguments {
                arguments WorkStyle2;
            };
            callbacks {
                    callbacks WorkStyle2Reasons;
            };
!(BX)            handlers {
!(BX)                handlers WorkStyle2Handlers;
!(BX)            };
        };
        Xm_Cancel managed {
            arguments {
                arguments WorkStyle2;
            };
            callbacks {
                    callbacks WorkStyle2Reasons;
            };
!(BX)            handlers {
!(BX)                handlers WorkStyle2Handlers;
!(BX)            };
        };
        Xm_Help managed {
            arguments {
                arguments WorkStyle2;
            };
            callbacks {
                    callbacks WorkStyle2Reasons;
            };
!(BX)            handlers {
!(BX)                handlers WorkStyle2Handlers;
!(BX)            };
        };
        Xm_Apply unmanaged {
            arguments {
                arguments WorkStyle2;
            };
            callbacks {
                    callbacks WorkStyle2Reasons;
            };
!(BX)            handlers {
!(BX)                handlers WorkStyle2Handlers;
!(BX)            };
        };
    };
    callbacks {
        callbacks WorkStyle2Reasons;
       MrmNcreateCallback = procedures {
                 ccb_save_widget_id(GUI_IMPORT_SELBOX);
                 ccb_dev_import_selbox();
        };
        XmNhelpCallback = procedure cb_fill_dev_selbox();
        XmNokCallback = procedure cb_device_import();
        XmNcancelCallback = procedure BxUnmanageCB("dev_importForm");
    };
!(BX)    handlers {
!(BX)        handlers WorkStyle2Handlers;
!(BX)    };
};

object menuBar : XmMenuBar widget {
    arguments {
        arguments MenuStyle;
        XmNmenuHelpWidget = XmCascadeButton helpCB;
        XmNwidth = 574;
        XmNheight = 34;
    };
    controls {
         managed XmCascadeButton fileCB;
         managed XmCascadeButton viewCB;
         managed XmCascadeButton commandCB;
         managed XmCascadeButton helpCB;
    };
    callbacks {
        callbacks MenuStyleReasons;
    };
!(BX)    handlers {
!(BX)        handlers MenuStyleHandlers;
!(BX)    };
};

object fileCB : XmCascadeButton widget {
    arguments {
        arguments MenuStyle;
!(BX)   _XmNlabelString = compound_string("File");
!(BX)   _XmNmnemonic = keysym("F");
        XmNx = 5;
        XmNy = 5;
        XmNwidth = 41;
        XmNheight = 24;
    };
    controls {
         unmanaged XmPulldownMenu filePDM;
    };
    callbacks {
        callbacks MenuStyleReasons;
        MrmNcreateCallback = procedure ccb_file_cb();
    };
!(BX)    handlers {
!(BX)        handlers MenuStyleHandlers;
!(BX)    };
};

object filePDM : XmPulldownMenu widget {
    arguments {
    };
    controls {
         managed XmPushButton importPB;
         managed XmPushButton closePB;
         managed XmPushButton exitPB;
    };
    callbacks {
    };
};

object importPB : XmPushButton widget {
    arguments {
        arguments MenuStyle;
!(BX)   _XmNlabelString = compound_string("Import device ...");
!(BX)   _XmNmnemonic = keysym("I");
    };
    controls {
    };
    callbacks {
        callbacks MenuStyleReasons;
        XmNactivateCallback = procedure BxManageCB("dev_importForm");
    };
!(BX)    handlers {
!(BX)        handlers MenuStyleHandlers;
!(BX)    };
};

object closePB : XmPushButton widget {
    arguments {
        arguments MenuStyle;
        XmNalignment = XmALIGNMENT_BEGINNING;
!(BX)   _XmNlabelString = compound_string("Close device ...");
!(BX)   _XmNmnemonic = keysym("C");
        XmNrecomputeSize = false;
    };
    controls {
    };
    callbacks {
        callbacks MenuStyleReasons;
        XmNactivateCallback = procedure BxManageCB("confirmCloseMessBox");
    };
!(BX)    handlers {
!(BX)        handlers MenuStyleHandlers;
!(BX)    };
};

object exitPB : XmPushButton widget {
    arguments {
        arguments MenuStyle;
!(BX)   _XmNlabelString = compound_string("Exit");
!(BX)   _XmNmnemonic = keysym("E");
        XmNrecomputeSize = false;
    };
    controls {
    };
    callbacks {
        callbacks MenuStyleReasons;
        XmNactivateCallback = procedure BxManageCB("confirmExitMessBox");
    };
!(BX)    handlers {
!(BX)        handlers MenuStyleHandlers;
!(BX)    };
};

object viewCB : XmCascadeButton widget {
    arguments {
        arguments MenuStyle;
!(BX)   _XmNlabelString = compound_string("View");
!(BX)   _XmNmnemonic = keysym("V");
        XmNx = 46;
        XmNy = 5;
        XmNwidth = 48;
        XmNheight = 24;
    };
    controls {
         unmanaged XmPulldownMenu viewPDM;
    };
    callbacks {
        callbacks MenuStyleReasons;
    };
!(BX)    handlers {
!(BX)        handlers MenuStyleHandlers;
!(BX)    };
};

object viewPDM : XmPulldownMenu widget {
    arguments {
    };
    controls {
         managed XmPushButton dev_infoPB;
    };
    callbacks {
    };
};

object dev_infoPB : XmPushButton widget {
    arguments {
        arguments MenuStyle;
!(BX)   _XmNlabelString = compound_string("Device Info");
!(BX)   _XmNmnemonic = keysym("D");
    };
    controls {
    };
    callbacks {
        callbacks MenuStyleReasons;
        XmNactivateCallback = procedure cb_dev_info();
    };
!(BX)    handlers {
!(BX)        handlers MenuStyleHandlers;
!(BX)    };
};

object commandCB : XmCascadeButton widget {
    arguments {
        arguments MenuStyle;
        XmNlabelString = compound_string("Commands");
!(BX)   _XmNmnemonic = keysym("C");
        XmNx = 94;
        XmNy = 5;
        XmNwidth = 94;
        XmNheight = 24;
    };
    controls {
         unmanaged XmPulldownMenu commandPDM;
    };
    callbacks {
        callbacks MenuStyleReasons;
    };
!(BX)    handlers {
!(BX)        handlers MenuStyleHandlers;
!(BX)    };
};

object commandPDM : XmPulldownMenu widget {
    arguments {
    };
    controls {
         managed XmPushButton statusPB;
         managed XmPushButton statePB;
         managed XmPushButton ch_timeoutPB;
         managed XmPushButton ch_protocolPB;
    };
    callbacks {
    };
};

object statusPB : XmPushButton widget {
    arguments {
        arguments MenuStyle;
!(BX)   _XmNlabelString = compound_string("Status");
!(BX)   _XmNmnemonic = keysym("S");
        XmNrecomputeSize = false;
    };
    controls {
    };
    callbacks {
        callbacks MenuStyleReasons;
        XmNactivateCallback = procedure cb_specified_cmd("DevStatus");
    };
!(BX)    handlers {
!(BX)        handlers MenuStyleHandlers;
!(BX)    };
};

object statePB : XmPushButton widget {
    arguments {
        arguments MenuStyle;
!(BX)   _XmNlabelString = compound_string("State");
        XmNmnemonic = keysym("t");
        XmNrecomputeSize = false;
    };
    controls {
    };
    callbacks {
        callbacks MenuStyleReasons;
        XmNactivateCallback = procedure cb_specified_cmd("DevState");
    };
!(BX)    handlers {
!(BX)        handlers MenuStyleHandlers;
!(BX)    };
};

object ch_timeoutPB : XmPushButton widget {
    arguments {
        arguments MenuStyle;
!(BX)   _XmNlabelString = compound_string("Change  RPC  Timeout ...");
!(BX)   _XmNmnemonic = keysym("T");
    };
    controls {
    };
    callbacks {
        callbacks MenuStyleReasons;
        XmNactivateCallback = procedure cb_prompt_timeout();
    };
!(BX)    handlers {
!(BX)        handlers MenuStyleHandlers;
!(BX)    };
};

object ch_protocolPB : XmPushButton widget {
    arguments {
        arguments MenuStyle;
!(BX)   _XmNlabelString = compound_string("Change  RPC  Protocol ...");
!(BX)   _XmNmnemonic = keysym("P");
    };
    controls {
    };
    callbacks {
        callbacks MenuStyleReasons;
       XmNactivateCallback = procedures {
                 cb_unset_rpc_protocol();
                 BxManageCB("protocolBB");
        };
    };
!(BX)    handlers {
!(BX)        handlers MenuStyleHandlers;
!(BX)    };
};

object helpCB : XmCascadeButton widget {
    arguments {
        arguments MenuStyle;
        XmNlabelString = compound_string("Help");
!(BX)   _XmNmnemonic = keysym("H");
        XmNx = 522;
        XmNy = 5;
        XmNwidth = 47;
        XmNheight = 24;
    };
    controls {
         unmanaged XmPulldownMenu helpPDM;
    };
    callbacks {
        callbacks MenuStyleReasons;
    };
!(BX)    handlers {
!(BX)        handlers MenuStyleHandlers;
!(BX)    };
};

object helpPDM : XmPulldownMenu widget {
    arguments {
    };
    controls {
         managed XmPushButton on_versionPB;
         managed XmPushButton on_appliPB;
    };
    callbacks {
    };
};

object on_versionPB : XmPushButton widget {
    arguments {
        arguments MenuStyle;
!(BX)   _XmNlabelString = compound_string("On Version");
!(BX)   _XmNmnemonic = keysym("V");
    };
    controls {
    };
    callbacks {
        callbacks MenuStyleReasons;
        XmNactivateCallback = procedure BxManageCB("help_versionBB");
    };
!(BX)    handlers {
!(BX)        handlers MenuStyleHandlers;
!(BX)    };
};

object on_appliPB : XmPushButton widget {
    arguments {
        arguments MenuStyle;
!(BX)   _XmNlabelString = compound_string("On Application");
!(BX)   _XmNmnemonic = keysym("A");
    };
    controls {
    };
    callbacks {
        callbacks MenuStyleReasons;
        XmNactivateCallback = procedure BxManageCB("help_appliBB");
    };
!(BX)    handlers {
!(BX)        handlers MenuStyleHandlers;
!(BX)    };
};

object mainPW : XmPanedWindow widget {
    arguments {
        arguments WorkStyle2;
        XmNwidth = 574;
        XmNheight = 565;
    };
    controls {
         managed XmScrolledWindow mainSW;
         managed XmScrolledWindow main_resultSW;
    };
    callbacks {
        callbacks WorkStyle2Reasons;
    };
!(BX)    handlers {
!(BX)        handlers WorkStyle2Handlers;
!(BX)    };
};

object mainSW : XmScrolledWindow widget {
    arguments {
        arguments WorkStyle2;
        XmNscrollingPolicy = XmAUTOMATIC;
        XmNwidth = 568;
        XmNheight = 221;
    };
    controls {
         managed XmRowColumn mainRC;
    };
    callbacks {
        callbacks WorkStyle2Reasons;
    };
!(BX)    handlers {
!(BX)        handlers WorkStyle2Handlers;
!(BX)    };
};

object mainRC : XmRowColumn widget {
    arguments {
        arguments WorkStyle2;
        XmNadjustLast = false;
        XmNmarginWidth = 15;
        XmNmarginHeight = 15;
        XmNorientation = XmHORIZONTAL;
        XmNspacing = 20;
        XmNpacking = XmPACK_COLUMN;
        XmNwidth = 568;
        XmNheight = 221;
    };
    controls {
    };
    callbacks {
        callbacks WorkStyle2Reasons;
        MrmNcreateCallback = procedure ccb_save_widget_id(GUI_MAIN_ROW_COL);
    };
!(BX)    handlers {
!(BX)        handlers WorkStyle2Handlers;
!(BX)    };
};

object main_resultSW : XmScrolledWindow widget {
    arguments {
        arguments WorkStyle2;
        XmNscrollingPolicy = XmAPPLICATION_DEFINED;
        XmNwidth = 568;
        XmNheight = 330;
    };
    controls {
         managed XmText main_resultText;
    };
    callbacks {
        callbacks WorkStyle2Reasons;
    };
!(BX)    handlers {
!(BX)        handlers WorkStyle2Handlers;
!(BX)    };
};

object main_resultText : XmText widget {
    arguments {
        arguments WorkStyle2;
        XmNeditMode = XmMULTI_LINE_EDIT;
        XmNeditable = false;
        XmNcursorPositionVisible = false;
    };
    controls {
    };
    callbacks {
        callbacks WorkStyle2Reasons;
        MrmNcreateCallback = procedure ccb_save_widget_id(GUI_MAIN_RESULT_TEXT);
    };
!(BX)    handlers {
!(BX)        handlers WorkStyle2Handlers;
!(BX)    };
};
end module;
